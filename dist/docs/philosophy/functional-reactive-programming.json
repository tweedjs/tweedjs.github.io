{
  "html": "<p>During the 20th century, at a time when hardware was expensive and processing power\nextremely limited, programmers were expected to write code that optimized every processor\ncycle. Choosing the correct control flow statement for a certain task could save seconds\nor minutes of execution time. Careful management of memory could increase performance\ntenfold.</p>\n<p>It&#39;s no coincidence that the dominating programming paradigm at the time was procedural\nprogramming. Today, C remains as one of the most popular programming languages in the\nworld.</p>\n<p>C programmers were the ones out in the field, writing the systems we rely on today. But\nthere was another discipline that was very popular in the Computer Science space.\nFunctional Programming.</p>\n<p>Scientists had realized that it was sometimes quite hard to <em>prove</em> that a procedural\nprogram worked correctly. Overflowing, pointer arithmetic, and memory leaks were\nresponsible for so many subtle bugs that algorithms required in-depth and repeated testing\nto prove itself as correct.</p>\n<p>But scientists and mathematicians already had a language to describe algorithms. <em>Lambda\nCalculus</em> is a notation to describe computation, including the notion of functions. One\nproperty of Lambda Calculus that differs from a language like C, it that data can <em>never</em>\nbe changed. There&#39;s no such thing as changing data, since data is just representing a\nvalue. Consider the following code:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\ni <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\ni <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span></code></pre><p>Here, we repeatedly change the <em>value</em> of the variable <code>i</code>. But we never change any data,\nbecause even though we say that <code>i</code> is <em>equal</em> to <code><span class=\"token number\">0</span></code>, and that <code>i</code> is later changed to be\n<code><span class=\"token number\">1</span></code>, we wouldn&#39;t expect <code><span class=\"token number\">0</span></code> to now be <em>equal</em> to <code><span class=\"token number\">1</span></code>.</p>\n<p>Variables that behave like this stem from the hardware centric tradition, where data\nexists in memory, and variables simply point to that position in memory. When we reassign\na variable, we write over the piece of memory with a new value.</p>\n<p>In Lambda Calculus, there is no such thing as reassignment, because a variable represents\na value and a value cannot change. <code><span class=\"token number\">0</span></code> is always <code><span class=\"token number\">0</span></code>, so if <code>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code> then <code>i</code> is always\n<code>i</code>.</p>\n<h3 id=\"functional-programming\">Functional Programming</h3>\n<p>This property made Lambda Calculus easier to prove correct than procedural programming,\nand scientists wanted to bring that level of certainty to the world of Computer Science.\nProgramming languages that came out of this discipline are called Functional Programming\nLanguages.</p>\n<p>Given the constraint that data can never change, it&#39;s hard to imagine how to do anything\nmore than mathematical computations. For example, changing the contents of a file in the\nfile system is, by definition, changing data. So we can&#39;t do that, right?</p>\n<p>Computer scientists and mathematicians have developed ways to represents the changing of\ndata without violating the rules of the functional paradigm. Advanced concepts such as\n<em>Monads</em>, which we won&#39;t go into here, made functional programming usable for more tasks\nthan just solving mathematical expressions.</p>\n<h3 id=\"functional-reactive-programming\">Functional Reactive Programming</h3>\n<p>In the context of interactive user interfaces, handling state changes is a requirement.\nWhen a user clicks a button to open a menu, the state of the UI has changed. We can\nimagine a variable <code>menu<span class=\"token punctuation\">.</span>isOpen</code> being changed from <code><span class=\"token boolean\">false</span></code> to <code><span class=\"token boolean\">true</span></code>.</p>\n<p>In procedural style, we must first change the variable, then get the DOM node representing\nthe menu, then mutate the DOM to account for the change. In a functional style, any state\nchange should rebuild the entire DOM.</p>\n<p>This is essentially achieved with <a href=\"#/docs/quick-tour/jsx-and-vdom\" title=\"JSX and Virtual DOM\">JSX and Virtual DOM</a>.</p>\n<h3 id=\"frp-and-tweed\">FRP and Tweed</h3>\n<p>In Tweed, and property decorated with <code><span class=\"token annotation\">@mutating</span></code> will trigger a rerender of the UI when\nchanged. The <code><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> method can use those variables with the knowledge that they will\nalways be up to date:</p>\n<example-slot></example-slot>",
  "examples": [
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> Timer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation\">@mutating</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> Timer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation\">@mutating</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token class-name\"> Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "fiddle": false
    }
  ]
}