{
  "html": "<p>First of all, we need to look at JSX. It&#39;s the syntax that we use to construct Virtual DOM\nnodes. It looks like XML!</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre><p>A fragment of JSX is actually an expression in JavaScript. As we can see in the above\nexample, we can save the result of a JSX expression to a variable. In fact, after the\ncompilation phase, the above code will be a function call, looking like this:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span></code></pre><p>That <code>Node</code> function is supplied by Tweed. The first argument is the name of the element,\nwhich is an <code>H1</code> in our case. The second argument will be an object if we supply any\nattributes to the tag:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>hello<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\" spellcheck=\"true\">// Compiles to</span>\n<span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span></code></pre><p>All subsequent arguments represent the children of the element. Let&#39;s look at one more\nexample with a little more complex JSX expression:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> complexHello <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>wrapper<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>heading<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Compiles to</span>\n<span class=\"token keyword\">const</span> complexHello <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wrapper'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">\n    Node</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'heading'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre><blockquote>\n<p><strong>Note:</strong> As with any expression in JavaScript, we are free to wrap it in parentheses to\nmake it clearer. This is common to make the open and close tags line up.</p>\n</blockquote>\n<h3 id=\"interpolation\">Interpolation</h3>\n<p>This is all well and good, but most of the time our JSX will need to contain variables and\ndata from the outside. We can use curly brackets to <em>interpolate</em> our data into the JSX\nexpression. It looks like this:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token string\">'World'</span>\n<span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Hello <span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre><p>A similar syntax is used for putting variables into attributes:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token string\">'some-class'</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span></code></pre><blockquote>\n<p><strong>Note:</strong> As opposed to HTML5, all elements must be closed, either with a closing tag or\na self-closing tag (<code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token punctuation\">/></span></span></code>). Elements that are not self-closing in HTML, like\n<code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code> can still be self-closed in JSX.</p>\n</blockquote>\n<h3 id=\"the-node-function\">The <code>Node</code> function</h3>\n<p>As mentioned above, JSX expressions are compiled to function calls to a function called\n<code>Node</code>. This function is supplied by Tweed, but not globally. That means it has to be\nimported at the top of every file that contains JSX:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\"> Node</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'tweed'</span>\n\n<span class=\"token keyword\">const</span> pic <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>...<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/></span></span></code></pre><blockquote>\n<p><strong>Note:</strong> If you&#39;re not worried about polluting the global scope, you can assign the\n<code>Node</code> function to the global object in the entry point file. That way the function\nwill be available in every file, making the import statements redundant.</p>\n</blockquote>\n<h3 id=\"object-attributes\">Object attributes</h3>\n<p>Some special attributes accept objects instead of strings. If you pass an object to the\n<code><span class=\"token keyword\">class</span></code> attribute, the keys of that object will be added as classes on the element, <em>if</em>\ntheir values are <code><span class=\"token boolean\">true</span></code>.</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'this-class-will-be-added'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'this-wont'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'this-will-be-added-if-expression-is-true'</span><span class=\"token punctuation\">:</span> dynamic<span class=\"token punctuation\">.</span><span class=\"token function\">expression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre><p>The <code>style</code> attribute is pretty self explanatory:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    marginTop<span class=\"token punctuation\">:</span> <span class=\"token string\">'2em'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span></code></pre><blockquote>\n<p><strong>Note:</strong> If you want to send an object literal directly into the attribute, you will\nhave to use <em>two</em> curlies, because the outer ones declare that the attribute value will\nbe a JavaScript expression, and the inner ones are the actual object literal.</p>\n</blockquote>\n<p>The <code>on</code> attribute declare event listeners:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> events <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">click </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Button was clicked!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">on</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>events<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Click me<span class=\"token operator\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre><h3 id=\"shorthand-object-attributes\">Shorthand object attributes</h3>\n<p>If you want, you can represent the above with this short hand syntax:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">clickHandler </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Button was clicked!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">on-click</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span>clickHandler<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Click me<span class=\"token operator\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre><blockquote>\n<p><strong>Note:</strong> All the object attributes support this syntax. <code><span class=\"token keyword\">class</span><span class=\"token operator\">-</span>my<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span></code>,\n<code>style<span class=\"token operator\">-</span>marginTop<span class=\"token operator\">=</span></code>, and <code>on<span class=\"token operator\">-</span>mouseover<span class=\"token operator\">=</span></code> are all valid.</p>\n</blockquote>\n",
  "examples": []
}