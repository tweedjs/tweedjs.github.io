{
  "html": "<p>The easiest and quickest way to get up and running with Tweed is to use the CLI. It&#39;s a\none-time global install. You&#39;ll have a working app in 20 seconds.</p>\n<pre><code class=\"lang-shell\"><span class=\"shell-prompt\"></span><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --global tweed-cli\n<span class=\"shell-prompt\"></span>tweed new my-first-project</code></pre><p>The <code><span class=\"token keyword\">new</span></code> command is highly configurable. There are options for what compiler you want to\nuse (if any), if you want to use a linter, and much more. When you run the command it will\nask for confirmation before moving on, so you can review your choices.</p>\n<p>You can pass the <code><span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>interaction</code> flag to skip the confirmation step. This\nis nice if you want to automate the creation of projects in a script, or if you&#39;re just\nimpatient.</p>\n<p>By default, the command generates a simple Tweed app with a simple input box. Basically,\nthe Hello World example with <a href=\"#/docs/quick-tour/mutations\" title=\"Mutations\">mutations</a>.</p>\n<blockquote>\n<p><strong>Note:</strong> We will look for a <code>yarn</code> executable in your path, and use <a target=\"_blank\" href=\"https://yarnpkg.com\" title=\"Yarn Package Manager\">Yarn</a> to\ninstall all dependencies. This will greatly improve the speed of your installation\nprocess.</p>\n</blockquote>\n<h3 id=\"-tweed-generate-\"><code>tweed generate</code></h3>\n<p>The <code>generate</code> command can be used to quickly scaffold new components.</p>\n<pre><code class=\"lang-shell\"><span class=\"shell-prompt\"></span>tweed generate MyComponent\nGenerated src/MyComponent.js</code></pre><p>The <code>generate</code> command assumes that you&#39;re following the convention of one main class per\nfile, so in the example above the file will contain the following:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\"> Node</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'tweed'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span><span class=\"token class-name\"> MyComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre><p>If you want to generate a component in a file within a directory structure, you can\ndescribe the path from the <code>src</code> directory with a period separating the names. You can\nalso use a slash or a backslash if that&#39;s more natural to you:</p>\n<pre><code class=\"lang-shell\"><span class=\"shell-prompt\"></span>tweed generate deep.namespace.MyClass\nGenerated src\\deep\\namespace\\MyClass.tsx</code></pre><p>You may follow a different file naming convention, but the command will figure out what\nthe class should be called anyway.</p>\n<p>If you want to generate a corresponding unit test with the module, just use the flag\n<code><span class=\"token operator\">--</span>test</code> or <code><span class=\"token operator\">-</span>t</code>.</p>\n<pre><code class=\"lang-shell\"><span class=\"shell-prompt\"></span>tweed generate important_stuff.Namespace.my-class -t\nGenerated src/important_stuff/Namespace/my-class.tsx <span class=\"token comment\" spellcheck=\"true\"># MyClass is generated</span>\nGenerated __tests__/important_stuff/Namespace/my-class.test.tsx</code></pre><blockquote>\n<p><strong>Note:</strong> The <code>generate</code> command will look at your environment to figure out things like\nwhat compiler you&#39;re using, and will generate code depending on that. If TypeScript is\nused, a <code><span class=\"token punctuation\">.</span>tsx</code> file will be generated instead of a <code><span class=\"token punctuation\">.</span>js</code> file. Likewise, the test that\nis generated if the <code><span class=\"token operator\">--</span>test</code> flag is passed in will depend on what test framework you\nhave installed. In the example above, Jest is installed, so <code>__tests__</code> and <code><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span></code>\nconventions are used. For Mocha, <code>test</code> and <code><span class=\"token operator\">*</span>Test<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span></code> is used.</p>\n</blockquote>\n",
  "examples": []
}