{
  "html": "<p>The Object Oriented Programming paradigm was introduced by researchers and computer\nscientists at MIT during the late 1950&#39;s and early 1960&#39;s. At that time the dominating\nparadigm was Imperative Programming, and to some degree <a href=\"#/docs/philosophy/functional-reactive-programming\" title=\"Functional Reactive Programming\">Functional Programming</a>.</p>\n<p>Data is organized in <em>data structures</em>. In the procedural paradigm, the kind of data must\nbe known to determine what procedure or function should be called with that data. To make\nsense of the increasingly complex procedures, parts of those algorithms were extracted out\nto other procedures. Specifically, details about <em>how</em> to perform tasks could be located\nin simple functions. The <em>high level</em> understanding of the problem at hand could then be\nmore clearly described and progressively delegate down to functions with more finely\ngrained detail of the individual steps that the computer would have to take.</p>\n<p>This architecture resulted in programs that always excecuted <em>top-down</em>. <em>High level</em>\nfunction calls <em>low level</em> function, which calls an even <em>lower level</em> function.</p>\n<p>This turned out to be problematic, because the <em>high level policy</em> of the program would be\n<em>dependent</em> on the <em>low level detals</em> of the algorithm, meaning that any change to the low\nlevel code could force the high level code to change with it. Since the purpose of high\nlevel code is to give better understanding and reason to a complex system, having the low\nlevel code call the shots was brittle. Again, this whole situation was because the data\nsent into the program would have to be analyzed before the algorithm would know what to do\nwith it.</p>\n<p>This mental coupling between procedures was poorly defined, the scientists at MIT\nrealized. Instead of taking the data and putting it into functions, a message could be\nsent <em>to</em> the data, asking it to perform some action. The data, with the knowledge of\nitself, could then determine what procedure should be executed next. The <em>Object</em> was\nborn.</p>\n<p>This meant that the <em>higher level caller</em> would no longer need to have knowledge of the\ndata. It would simply need to know that the data could receive a specific kind of message.\nTo fulfill this requirement, descriptions of what messages could be accepted by an object\nwas defined. The <em>Interface</em> was created.</p>\n<p>The interface could then be defined in the <em>high level code</em>, so that the <em>low level code</em>\nwould simply have to conform to those descriptions. The program wouldn&#39;t even compile\notherwise.</p>\n<p>That way, the pecking order was turned over. The polarity was reversed.</p>\n<h3 id=\"let-s-see-some-code\">Let&#39;s see some code</h3>\n<p>Here is an example of procedural code:</p>\n<pre><code class=\"lang-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">main </span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">weShouldPrintAMessage</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printAMessage</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">weShouldPrintAMessage </span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'say'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printAMessage </span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Starts the procedure</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'say'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre><p>In this example, the <code>main</code> function contains the high level decision-making of the\nprogram, but needs to ask lower level code questions about the data before making the\nchoice. The lower level <code>weShouldPrintAMessage</code> and <code>printAMessage</code> functions must\ntherefore be inside the <code>main</code> function&#39;s scope.</p>\n<p>Now let&#39;s look at an OOP example:</p>\n<pre><code class=\"lang-typescript\"><span class=\"token keyword\">interface</span><span class=\"token class-name\"> CanPrint</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printAMessage </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span><span class=\"token class-name\"> DecidesWhetherToPrint</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">weShouldPrintAMessage </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">main </span><span class=\"token punctuation\">(</span>decides<span class=\"token punctuation\">:</span><span class=\"token class-name\"> DecidesWhetherToPrint</span><span class=\"token punctuation\">,</span> printer<span class=\"token punctuation\">:</span><span class=\"token class-name\"> CanPrint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>decides<span class=\"token punctuation\">.</span><span class=\"token function\">weShouldPrintAMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    printer<span class=\"token punctuation\">.</span><span class=\"token function\">printAMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre><p>This code compiles, but cannot run, because it lacks implementations for those interfaces.\nNotice however, that the high level <code>main</code> function doesn&#39;t bother analyzing any data. It\nonly cares about the <em>policy</em>, which in this contrived example is that a message should be\nprinted, but only under some circumstance.</p>\n<pre><code class=\"lang-typescript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> Console</span> <span class=\"token keyword\">implements</span><span class=\"token class-name\"> CanPrint</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> message<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">printAMessage </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> ChecksForSayCommand</span> <span class=\"token keyword\">implements</span><span class=\"token class-name\"> DecidesWhetherToPrint</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> command<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">weShouldPrintAMessage </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command <span class=\"token operator\">===</span> <span class=\"token string\">'say'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Starts the procedure</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token class-name\"> ChecksForSayCommand</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Console</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre><p>In the implementations we find essentially the same functions as in the procedural\nexample. However, instead of receiving the data as an argument to the function, the\nclasses give that responsibility to the even lower level code which is the entry point on\nthe last line.</p>\n<h3 id=\"polymorphism\">Polymorphism</h3>\n<p>The most important part of this shift is that the high level function now enforces a\npolicy independent from the details. We can now reuse this policy in another, completely\ndifferent context.</p>\n<pre><code class=\"lang-typescript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> Megaphone</span> <span class=\"token keyword\">implements</span><span class=\"token class-name\"> CanPrint</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> command<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">printAMessage </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'!!!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> ItsFriday</span> <span class=\"token keyword\">implements</span><span class=\"token class-name\"> DecidesWhetherToPrint</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">weShouldPrintAMessage </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">boolean</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Starts the procedure</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token class-name\"> ItsFriday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Megaphone</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre><p>This last example results in a program with a completely different behaviour.</p>\n<pre><code class=\"lang-shell\"><span class=\"token comment\" spellcheck=\"true\"># Correct input -- procedural</span>\n<span class=\"shell-prompt\"></span>procedural-example say <span class=\"token string\">\"Hello Procedural Programming\"</span>\nHello Procedural Programming\n\n<span class=\"token comment\" spellcheck=\"true\"># Incorrect input -- object oriented</span>\n<span class=\"shell-prompt\"></span>oop-example s_y <span class=\"token string\">\"Hello OOP\"</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># Correct input -- object oriented</span>\n<span class=\"shell-prompt\"></span>oop-example say <span class=\"token string\">\"Hello OOP\"</span>\nHello OOP\n\n<span class=\"token comment\" spellcheck=\"true\"># Different program, same policy</span>\n<span class=\"shell-prompt\"></span>oop-example-2 Message\nMESSAGE<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span> <span class=\"token comment\" spellcheck=\"true\"># If it's Friday, otherwise no output</span></code></pre><p>We call this kind of reusable property <em>Polymorphism</em>. It&#39;s behaviour enforcing logic\nregardless of data.</p>\n<hr>\n<h3 id=\"ood\">OOD</h3>\n<p>Even though OOP gives us the tools to write code this way, it doesn&#39;t force us to. It&#39;s up\nto the engineers to use the programming language a way that utilizes this powerful\nconcept. Taking care to structure a project in a maintainable fashion is what we call\nObject Oriented Design.</p>\n",
  "examples": []
}