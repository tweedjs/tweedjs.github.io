{
  "html": "<p>Consider the following module:</p>\n<example-slot></example-slot><p>Now let&#39;s change the module somewhat, and look at what happens:</p>\n<example-slot></example-slot><p>In the first example, since we need an instance of <code>B</code>, our first instinct is to import\nthe <code><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>B</code> module at the top of the file. But this is problematic, because now our <code>A</code>\nclass has a <em>concrete dependency</em> on <code>B</code>, which means that every time any other module\nimports <code>A</code>, it will also import <code>B</code>. For example, if we&#39;re using a bundler tool, anyone\nwho wants to use the <code>A</code> class must also cram <code>B</code> into the bundle.</p>\n<p>Now, you might say &quot;of course, we need the <code>B</code> to render <code>A</code>&quot;. That&#39;s true. But now look\nat the second example. Here, we&#39;re not importing <code>B</code> at the top, but instead we force\nwhoever uses our class to send in a <code>b</code> in our constructor. We&#39;re <em>injecting the\ndependency</em>.</p>\n<p>By performing this maneuver, we make it the <em>consumer&#39;s</em> business to actually import the\n<code>B</code> class. The benefit of this—and this is key—the consumer is free to choose another\nobject with a <code><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> method. If you&#39;re using TypeScript, you can formalize this by\nestablishing an interface that the object must satisfy:</p>\n<pre><code class=\"lang-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\"> Node</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'tweed'</span>\n\n<span class=\"token keyword\">interface</span><span class=\"token class-name\"> BInterface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token class-name\"> Node</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token class-name\"> BInterface</span></code></pre><p>The most common argument for why this is good, it for testing. If <code>A</code> imports <code>B</code> and a\nunit test imports <code>A</code> to test it, the unit test must also verify that <code>B</code> does what it&#39;s\nsupposed to. This may prove difficult, because <code>B</code> may be doing a lot of I/O operations.</p>\n<p>Look at what happens if we use <em>dependency injection</em> to inject a database object:</p>\n<example-slot></example-slot><p>To test this, all we need to do is the following:</p>\n<example-slot></example-slot><p>And just like that, we have tested the entirety of the behaviour of the <code>UserRepository</code>\nwithout actually interacting at all with the database, even though the database is\nimportant to the logic that the <code>UserRepository</code> handles.</p>\n<p>On the other hand, if the <code>UserRepository</code> <em>created</em> an instance of a database, we would\nhave to bend over backwards to set up the world for a simple method to be tested.</p>\n<hr>\n<h3 id=\"dependency-injection-and-tweed\">Dependency Injection and Tweed</h3>\n<p>When we&#39;re dealing with UI, it&#39;s easy to think that DI is unneccessary. When we think\nabout how modern UI frameworks implement <em>components</em> or <em>custom elements</em>, the only way\nto make a component include markup that they themselves don&#39;t include is with XML-style\nchildren:</p>\n<pre><code class=\"lang-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-element</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-element</span><span class=\"token punctuation\">></span></span></code></pre><p>A component that needs to render different pieces of its internals differently usually\nresort to using special children or attributes to define these relationships:</p>\n<pre><code class=\"lang-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-layout</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-title</span><span class=\"token punctuation\">></span></span>A Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-menu</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-menu-item</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>/<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-menu-item</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-menu</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-page</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-page</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-layout</span><span class=\"token punctuation\">></span></span></code></pre><p>This looks appealing at first, because it gives us a very clear view of how the UI is\nbuilt up, instead of being thrown off by a bunch of noise, like\n<code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>col</span> <span class=\"token attr-name\">col-xs-12</span> <span class=\"token attr-name\">col-md-4'</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code>.</p>\n<p>However, this structure gets increasingly brittle, because there is no way for the\ncomponents to validate or enforce specific structures within its children, and it&#39;s very\nhard to know if something breaks if a feature is added or changed in any way.</p>\n<p>Now look at this example:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> layout <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Layout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token string\">'A Title'</span><span class=\"token punctuation\">,</span>\n  menu<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Menu</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span><span class=\"token class-name\"> MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  page<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre><p>This is arguably just as clear, declarative, and readable as the XML-style implementation,\nand we&#39;re now in the domain of a programming language, so how you get to those values are\ncompletely up to you as a developer. Load the menu in from another module, or generate the\n<code>page</code> depending on the URL of the browser. The <code>Layout</code> only cares that the constructor\nargument should look like this:</p>\n<pre><code class=\"lang-typescript\"><span class=\"token keyword\">interface</span><span class=\"token class-name\"> LayoutDependencies</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span>\n  menu<span class=\"token punctuation\">:</span><span class=\"token class-name\"> Menu</span>\n  page<span class=\"token punctuation\">:</span><span class=\"token class-name\"> Node</span>\n<span class=\"token punctuation\">}</span></code></pre><p>Likewise, the <code>Menu</code> class can have a constructor that looks like this:</p>\n<pre><code class=\"lang-typescript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> Menu</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>items<span class=\"token punctuation\">:</span><span class=\"token class-name\"> MenuItem</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre><p>We now have clearly defined borders between these components that can be managed, so that\nthings don&#39;t break.</p>\n<h3 id=\"collaborators-into-constructors-data-into-methods\">Collaborators into Constructors, Data into Methods</h3>\n<p>Because we&#39;re using classes instead of plain functions, we effectively have two different\ntypes of parameter lists: <em>constructor parameters</em> and <em>method parameters</em>. But when\nshould you use which?</p>\n<p>In other words, what&#39;s the difference between <code><span class=\"token keyword\">new</span><span class=\"token class-name\"> A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token class-name\"> B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> and\n<code><span class=\"token keyword\">new</span><span class=\"token class-name\"> A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token class-name\"> B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code> and when is it appropriate to use which one?</p>\n<p>The main thing to keep in mind here is: whoever chooses what to send to the constructor\nalso knows what the class is. However, an existing object can be passed around, and\nwhoever calls a method just needs to know the signature of that very method.</p>\n<p>Keep this in mind: <em>Collaborators into Constructors, Data into Methods</em>. For example, a\ncomponent like <code>ScrollableList</code> could be implemented like this:</p>\n<example-slot></example-slot><p>The <code>ListStyle</code> passed in determines how the <code>ScrollableList</code> looks: it&#39;s a collaborator.\nWhat list items to show, though, can be different every time. It doesn&#39;t matter. They&#39;re\njust data.</p>\n<p>In fact, since items in a list most likely is best described as data, that <code>Menu</code> example\nfrom before could with good reason be designed so that the menu items are passed into the\nrender method instead of the constructor:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> menu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmenu<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>/<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>/about<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>About<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre><p>However, if we wanted our menu to be automatically generated from something like a router,\nwe might opt for something like this:</p>\n<pre><code class=\"lang-javascript\"><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/about'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> menu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> Menu</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span>\n\nmenu<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre><p>It&#39;s up to you to decide whether to call something a collaborator or data. This\ndistinction is one of the challenges of <a href=\"#/docs/ecosystem/harris\" title=\"Harris – State Manager\">OOD</a>.</p>\n<h3 id=\"stateful-collaborators\">Stateful Collaborators</h3>\n<p>We now have to tackle another issue. Consider this class:</p>\n<example-slot></example-slot><p>Is this a collaborator or data?</p>\n<p>We can take different approaches here. Traditional OOP developers might suggest to inject\nan instance of <code>TodoList</code> in the constructor of any component that uses the data:</p>\n<example-slot></example-slot><p>However, like we discussed, this ties a <code>TodoListView</code> instance to a single list of todos.\nIf we wanted to support multiple todo lists, we would have to create a new <code>TodoListView</code>\nas well.</p>\n<p>Another approach would be this:</p>\n<example-slot></example-slot><p>Here we&#39;ve removed the dependency on the state container <code>TodoList</code> completely. Instead we\nonly rely on the data to be passed into the <code><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> method.</p>\n<p>This would require another component like this one:</p>\n<example-slot></example-slot><p>Again, this might seem overly convoluted, but it may not be such a bad idea. It lets the\nview be completely stateless and immutable and the mutable state be completely separated\nfrom the view. At this point we&#39;re approaching a <a target=\"_blank\" href=\"https://facebook.github.io/flux\" title=\"Flux Architecture\">Flux</a>-like architecture, which you\nmight like.</p>\n<blockquote>\n<p><strong>Note:</strong> You may also want to check out [Harris][harris], a state manager with first\nclass support for Tweed.</p>\n</blockquote>\n",
  "examples": [
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token comment\" spellcheck=\"true\">// Example 1.</span>\n\n<span class=\"token keyword\">import</span><span class=\"token class-name\"> B</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./B'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span><span class=\"token class-name\"> A</span> <span class=\"token punctuation\">{</span>\n  b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token comment\" spellcheck=\"true\">// Example 1.</span>\n\n<span class=\"token keyword\">import</span><span class=\"token class-name\"> B</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./B'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span><span class=\"token class-name\"> A</span> <span class=\"token punctuation\">{</span>\n  b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "fiddle": false
    },
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token comment\" spellcheck=\"true\">// Example 2.</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span><span class=\"token class-name\"> A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token comment\" spellcheck=\"true\">// Example 2.</span>\n\n<span class=\"token keyword\">import</span><span class=\"token class-name\"> BInterface</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./BInterface'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span><span class=\"token class-name\"> A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> b<span class=\"token punctuation\">:</span><span class=\"token class-name\"> BInterface</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "fiddle": false
    },
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span><span class=\"token class-name\"> UserRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_db <span class=\"token operator\">=</span> db\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">all </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM \"users\";'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span><span class=\"token class-name\"> SQLDatabase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">query </span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token class-name\"> Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span><span class=\"token class-name\"> UserRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> _db<span class=\"token punctuation\">:</span><span class=\"token class-name\"> SQLDatabase</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">all </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM \"users\";'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "fiddle": false
    },
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token keyword\">import</span><span class=\"token class-name\"> UserRepository</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./UserRepository'</span>\n\n<span class=\"token keyword\">const</span> mockDb <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">query </span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM \"users\";'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'db response'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> repo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> UserRepository</span><span class=\"token punctuation\">(</span>mockDb<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>repo<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'db response'</span><span class=\"token punctuation\">)</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token keyword\">import</span><span class=\"token class-name\"> UserRepository</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\"> SQLDatabase</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./UserRepository'</span>\n\n<span class=\"token keyword\">const</span> mockDb<span class=\"token punctuation\">:</span><span class=\"token class-name\"> SQLDatabase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">query </span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token class-name\"> Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM \"users\";'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'db response'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> repo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token class-name\"> UserRepository</span><span class=\"token punctuation\">(</span>mockDb<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>repo<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'db response'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>",
      "fiddle": false
    },
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> ScrollableList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>listStyle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_listStyle <span class=\"token operator\">=</span> listStyle\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> _<span class=\"token function\">style </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_listStyle<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_height<span class=\"token punctuation\">,</span>\n        overflowY<span class=\"token punctuation\">:</span> <span class=\"token string\">'scroll'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_style<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token keyword\">interface</span><span class=\"token class-name\"> ListStyle</span> <span class=\"token punctuation\">{</span>\n  style<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>rule<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span><span class=\"token class-name\"> ScrollableList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> _listStyle<span class=\"token punctuation\">:</span><span class=\"token class-name\"> ListStyle</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">get</span> _<span class=\"token function\">style </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_listStyle<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_height<span class=\"token punctuation\">,</span>\n        overflowY<span class=\"token punctuation\">:</span> <span class=\"token string\">'scroll'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">:</span><span class=\"token class-name\"> Node</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token class-name\"> Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_style<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">:</span><span class=\"token class-name\"> Node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "fiddle": false
    },
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> TodoList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation\">@mutating</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> TodoList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation\">@mutating</span> items<span class=\"token punctuation\">:</span><span class=\"token class-name\"> Todo</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "fiddle": false
    },
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> TodoListView</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>todoList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todoList <span class=\"token operator\">=</span> todoList\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todoList<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> TodoListView</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> _todoList<span class=\"token punctuation\">:</span><span class=\"token class-name\"> TodoList</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todoList<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "fiddle": false
    },
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> TodoListView</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> TodoListView</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">:</span><span class=\"token class-name\"> Todo</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "fiddle": false
    },
    {
      "javascript": "<pre><code class=\"lang-javascript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> TodoListContainer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>todoListView<span class=\"token punctuation\">,</span> todoList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todoListView <span class=\"token operator\">=</span> todoListView\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todoList <span class=\"token operator\">=</span> todoList\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todoListView<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todoList<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "typescript": "<pre><code class=\"lang-typescript\"><span class=\"token keyword\">class</span><span class=\"token class-name\"> TodoListContainer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> _todoListView<span class=\"token punctuation\">:</span><span class=\"token class-name\"> TodoListView</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> _todoList<span class=\"token punctuation\">:</span><span class=\"token class-name\"> TodoList</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todoListView<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todoList<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>",
      "fiddle": false
    }
  ]
}